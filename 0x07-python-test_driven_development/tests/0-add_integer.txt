#0-add_integer.txt

=============================
How to use 0-add_integer.py
=============================

This module defines an integer addition function "add_integer(a, b=98)"

usage:
=======

"add_integer()" retturns the addition of its two integer arguments. for numbers, that value is equivalent to using "+" operator.


::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(3, 4)
    7

::

    >>> add_integer(3, -4)
    -1

::

It also works with floating-point values.

::

    >>> add_integer(5.0, 6.0)
    11

::

Note that the values are cast to int before addition.

::

    >>> add_integer(5.9, 0.3)
    5

::

    >>> add_integer(-5.9, -0.3)
    -5

::

Floating and non-floating values can be combined.

::

    >>> add_integer(2.0, 3)
    5

::

    >>> add_integer(2.3, -3)
    -1

::

The second argument is optional but by default it is '98'.

::

    >>> add_integer(2)
    100

::

Non-numbers
===========

"add_integer()" expects only integers or floats.
If the argument is not of integer or float type a TypeError is raised.

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
      File "<stdin>", line 13, in <module>
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer("hello")
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
  

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both are non-integers the typeError is returned on a.

::

    >>> add_integer("boy", "BYE")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to an integer

NaN values will not work either

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN into an integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float Nan into an integer


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
